# -*- coding: utf-8 -*-
"""
Egyel≈ëre benthagyom referenciak√©nt ha m√©gsem lenne jobb alternat√≠va,
de jelenleg semmi ok nincs arra hogy ezt haszn√°ljuk egy norm√°lis k√∂nyvt√°r helyett

A lumibot el≈ënye az, hogy nat√≠van t√°mogatj√°k ≈ët a vele partners√©gben √°ll√≥ t≈ëzsd√©k, √©s
√≠gy kaphatsz egy f√©lk√©sz botot out-of-the-box. De tudtommal ezek mind amerikai t≈ëzsd√©k, 
sz√≥val nek√ºnk haszontalanok, plusz saj√°t backtestet tudunk √≠rni, nek√ºnk az optimaliz√°ci√≥ban
kell seg√≠ts√©g, mert egy gar√°zsprojektn√©l nem tudunk a semmib≈ël √≠rni egy absztrakt
oszt√°lyhierarchi√°t ami tetsz≈ëleges strat√©gi√°kat modellez le +1000 lehets√©ges
param√©terkombin√°ci√≥val.

Az ilyesmit meghagyom a milliomos quant trading c√©geknek

B√≥nusz: a MyStrategy.backtest() futtat√°sa lefagyasztja a Spydert, √©s csak
feladatkezel≈ëvel lehet kil≈ëni ü§°
"""
from datetime import datetime

from lumibot.backtesting import YahooDataBacktesting
from lumibot.strategies import Strategy


# A simple strategy that buys AAPL on the first day and hold it
class MyStrategy(Strategy):
    def on_trading_iteration(self):
        if self.first_iteration:
            aapl_price = self.get_last_price("AAPL")
            quantity = self.portfolio_value // aapl_price
            order = self.create_order("AAPL", quantity, "buy")
            self.submit_order(order)


# Pick the dates that you want to start and end your backtest
# and the allocated budget
backtesting_start = datetime(2020, 11, 1)
backtesting_end = datetime(2020, 12, 31)

# Run the backtest
MyStrategy.backtest(
    YahooDataBacktesting,
    backtesting_start,
    backtesting_end,
)
